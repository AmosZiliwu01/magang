<?php

namespace App\Http\Controllers;

use App\Models\Pengurus;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class PengurusController extends Controller
{
    public function index()
    {
        $pengurus = Pengurus::get();
        return response()->json([
            'success' => true,
            'data' => $pengurus
        ], 201);
    }

    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'nama' => 'required',
            'jabatan' => 'required',
            'deskripsi' => 'required',
            'gambar' => 'required|image|mimes:jpeg,png,jpg,gif|max:2048',
            'urutan' => 'nullable|numeric',
            'user_id' => 'nullable|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => $validator->errors()
            ], 400);
        }

        $gambar = $request->file('gambar')->store('public/gambar');
        $gambar = str_replace('public/', '', $gambar);

        // Set default order to last if not provided
        $urutan = $request->urutan;
        if (!$urutan) {
            $maxUrutan = Pengurus::max('urutan') ?? 0;
            $urutan = $maxUrutan + 10; // Use increments of 10 for easier reordering
        }

        $pengurus = Pengurus::create([
            'nama' => $request->nama,
            'jabatan' => $request->jabatan,
            'deskripsi' => $request->deskripsi,
            'gambar' => $gambar,
            'urutan' => $urutan,
            'user_id' => $request->user_id
        ]);

        return response()->json([
            'success' => true,
            'message' => 'Data berhasil disimpan',
            'data' => $pengurus
        ]);
    }

    public function show($id)
    {
        $pengurus = Pengurus::find($id);
        return response()->json([
            'success' => true,
            'data' => $pengurus
        ]);
    }

    public function update(Request $request, $id)
    {
        $validator = Validator::make($request->all(), [
            'nama' => 'required',
            'jabatan' => 'required',
            'deskripsi' => 'required',
            'gambar' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
            'user_id' => 'nullable|exists:users,id',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => $validator->errors()
            ], 400);
        }

        $pengurus = Pengurus::find($id);
        $data = [
            'nama' => $request->nama,
            'jabatan' => $request->jabatan,
            'deskripsi' => $request->deskripsi,
            'user_id' => $request->user_id
        ];

        // Handle image upload if a new image is provided
        if ($request->hasFile('gambar')) {
            $gambar = $request->file('gambar')->store('public/gambar');
            $data['gambar'] = str_replace('public/', '', $gambar);
        }

        $pengurus->update($data);

        return response()->json([
            'success' => true,
            'message' => 'Data berhasil diperbarui',
            'data' => $pengurus
        ]);
    }

    public function destroy($id)
    {
        $pengurus = Pengurus::find($id);
        $pengurus->delete();
        return response()->json([
            'success' => true,
            'message' => 'Data berhasil dihapus',
            'data' => $pengurus
        ], 201);
    }

    public function moveUp($id)
    {
        return DB::transaction(function() use ($id) {
            // Get all pengurus sorted by urutan
            $allPengurus = Pengurus::orderBy('urutan')->get();

            // Find the current pengurus and its index in the sorted list
            $currentIndex = $allPengurus->search(function($item) use ($id) {
                return $item->id == $id;
            });

            // If not found or already at the top, return error
            if ($currentIndex === false || $currentIndex === 0) {
                return response()->json([
                    'success' => false,
                    'message' => 'Pengurus sudah berada di posisi paling atas'
                ], 400);
            }

            // Get the pengurus above
            $previousPengurus = $allPengurus[$currentIndex - 1];
            $currentPengurus = $allPengurus[$currentIndex];

            // Swap urutan values
            $tempUrutan = $currentPengurus->urutan;
            $currentPengurus->urutan = $previousPengurus->urutan;
            $previousPengurus->urutan = $tempUrutan;

            $currentPengurus->save();
            $previousPengurus->save();

            return response()->json([
                'success' => true,
                'message' => 'Pengurus berhasil dipindahkan ke atas'
            ]);
        });
    }

    public function moveDown($id)
    {
        return DB::transaction(function() use ($id) {
            // Get all pengurus sorted by urutan
            $allPengurus = Pengurus::orderBy('urutan')->get();

            // Find the current pengurus and its index in the sorted list
            $currentIndex = $allPengurus->search(function($item) use ($id) {
                return $item->id == $id;
            });

            // If not found or already at the bottom, return error
            if ($currentIndex === false || $currentIndex === $allPengurus->count() - 1) {
                return response()->json([
                    'success' => false,
                    'message' => 'Pengurus sudah berada di posisi paling bawah'
                ], 400);
            }

            // Get the pengurus below
            $nextPengurus = $allPengurus[$currentIndex + 1];
            $currentPengurus = $allPengurus[$currentIndex];

            // Swap urutan values
            $tempUrutan = $currentPengurus->urutan;
            $currentPengurus->urutan = $nextPengurus->urutan;
            $nextPengurus->urutan = $tempUrutan;

            $currentPengurus->save();
            $nextPengurus->save();

            return response()->json([
                'success' => true,
                'message' => 'Pengurus berhasil dipindahkan ke bawah'
            ]);
        });
    }
}
